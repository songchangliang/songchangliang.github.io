<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[栓蛋外卖展示]]></title>
    <url>%2F2019%2F11%2F16%2Fzhanshi%2F</url>
    <content type="text"><![CDATA[主页面 搜索页面 订单页面 用户界面 注册登录界面]]></content>
  </entry>
  <entry>
    <title><![CDATA[node细节问题]]></title>
    <url>%2F2019%2F10%2F25%2Fnode%E7%BB%86%E8%8A%82%2F</url>
    <content type="text"><![CDATA[关于node中的细节问题 准备工作： node环境 有一定node基础 对express有一定了解 1、关于node服务器的反复重启 node自动重启工具nodemon 在编写node时，需要反复频繁的去重启服务器，非常繁琐，然而nodemon可实现对node代码的监视，一点发生变化，自动更新，省去了我们手动重启 如何使用nodemon 只需一步，npm下载至全局即可 1$ npm install -g nodemon 下载完毕后，全局会多出一个命令nodemon，他的使用方法很简单： 12345//通常我们启动node脚本时，会在cmd输出$ node 文件.js//现在我们只需将node改为nodemon即可$ nodemon 文件.js 2、关于express对post请求的解析在express中没有对post请求的封装，如果我们要使用post请求的话，就需要安装一个三方库body-parser。 安装 1$ npm install --save body-parser 配置 12345678910111213var express = require('express')// 将其引入var bodyParser = require('body-parser')var app = express()/*配置 body-parser配置之后，请求中的req就会多出一个属性 body，可通过req.body的形式来回去post请求得到数据*/app.use(bodyParser.urlencoded(&#123; extended: false &#125;))app.use(bodyParser.json()) 使用 1234app.post("/",function(req,res)&#123; console.log(req.body); res.send("可通过此方法查看")&#125;) 3、关于express对路由的处理​ 在正常开发中，路由是必不可少的，但是往往路由会非常多，会很难管理，这时我们就会想到新建一个专门用来存放路由的文件，来管理它，但是问题又来了，我们要怎么让这个文件与输出文件关联呢，之前通过回调函数的方法也可以完成任务，但是后来express为我们提供了专门的方法express.Router让我们来一起看看： 创建一个专门用来管理路由的文件router.js： 12345678910111213141516const express = require("express")//使用express的路由功能let router = express.Router()//新建路由都以router开头router.get("/get",function(req,res)&#123; res.end("我是get方式的路由");&#125;)router.post("/post",(req,res)=&gt;&#123; res.end("我是post方式的路由");&#125;)//将其暴露module.exports = router; 假定我们的主输出文件是app.js： 123456789const express = require("express");const router = require("./router");const app = express()//将路由挂载app.use(router)app.listen(88,function()&#123; console.log("连接成功") &#125;)]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器识别ES6模块化]]></title>
    <url>%2F2019%2F10%2F18%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%86%E5%88%ABES6%2F</url>
    <content type="text"><![CDATA[如何让浏览器识别ES6的模块化？​ 首先，浏览器并不是不支持ES6，而是支持不全面，所以我们要将其转换成ES5的形式，但这时浏览器又不识别require语法，导致无法实现模块化，解决方法并不难，我们一步步来： 准备工作： 安装node环境 了解一定ES6语法 1、创建文件1234567.├── js //用来存放原始代码| ├── module01.js| └── module02.js├── bin //用来存放最终代码├── index.html //主页├── .babelrc //babel的设置文件 注意： .babelrc文件不需要后缀，内容如下： 123&#123; "presets": ["es2015"]&#125; 2、库的下载 首先下载可将ES6转换为ES5的babel库 1$ npm install babel-cli browserify -g 再下载可将 require() 识别的browserify库 1$ npm install babel-preset-es2015 --save-dev 3、编写模块化代码 编写简单JavaScript代码以供展示 123456789101112/* module01.js 向外暴露两个方法*/export function add(a,b)&#123; console.log(a+b);&#125;;export function sub(a,b)&#123; console.log(a-b);&#125;; 123456789/* module02.js 引入module01中的方法并使用*/import &#123;add,sub&#125; from "/module01.js";add(6,4);sub(6,4); 4、编译转换代码 首先使用babel将ES6转换为ES5 1$ babel ./js -d ./bin 再使用browserify库编译要被引入文件，并保存为module.js文件 1$ browserify ./bin/module02.js -o ./bin/module.js 5、引入验证 将最终的module.js引入index.html中，并打开浏览器验证是否成功 1&lt;script src="./bin/module.js" &gt;&lt;/script&gt;]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysqli扩展]]></title>
    <url>%2F2019%2F10%2F12%2Fmysqli%2F</url>
    <content type="text"><![CDATA[PHP通过mysqli连接MySQL数据库​ 在PHP中，我们可以使用 mysqli扩展来访问用户的 MySQL 数据库服务器，来为我们的页面反馈数据，本文只阐述他的基本使用方法，仅用于个人复习与入门。 准备工作： 1、了解基本PHP语法 2、了解基本mysql语句 3、安装xampp（PHP+MySQL+Apache集成环境） 1、mysqli提供了很多可用的方法，作为入门使用，掌握其常用的几个即可，后续学习可去官方手册查看 常用方法： mysqli_connect(服务器地址，用户名，密码，[库名]); 用于连接数据库 mysqli_query($mysql,&quot;sql命令&quot;); 执行mysql指令，参数1：mysqli_connect返回的数据库 参数2：正常的mysql指令，支持所有mysql指令 mysqli_close($mysql); 结束连接 2、使用PHP连接本地mysql数据库：12345678//连接本地root数据库，有密码可填密码，无密码可省略，也可填空 $link = mysqli_connect("localhost:3306","root",""); //指定其编码格式，与数据库保持一致 $res = mysqli_query($link,"set names utf8"); //指定进入名为“m_sql”的数据库 $res = mysqli_query($link,"use m_sql"); 3、接下来对于数据库的操作都可使用mysqli_query()指令来完成：（只演示层删改）1234567891011121314151617181920212223242526//增 假设我们有n_news这个表，其中有id和name两个字段 $sql = "insert into n_news values(1,'张三')"; $res = mysqli_query($link,$sql); if($res)&#123; echo "增加成功"; &#125;else&#123; echo "增加失败"; &#125;;//删 删除n_news表中id为1的数据 $sql = "delete from n_news where id = '1'"; $res = mysqli_query($link,$sql); if($res)&#123; echo "删除成功"; &#125;else&#123; echo "删除失败"; &#125;;//改 将n_news表中id为1的数据的name字段改为“李四” $sql = "update n_news set name = '李四' where id = 1"; $res = mysqli_query($link,$sql); if($res)&#123; echo "修改成功"; &#125;else&#123; echo "修改失败"; &#125;; 4、看到这里会发现为什么没有查操作，查操作比较特殊，因为他所查到的数据成一个数据集模式，PHP无法直接识别，但是mysqli也提供了相对应的解析方法： 三种解析方法： mysqli_fetch_row()：以下标为索引解析数据 mysqli_fetch_assoc()：以字段名为索引解析数据 mysqli_fetch_array()：拼接前两种解析结果 1234567891011//查看n_news表中数据 $sql = "select * from n_news"; $res = mysqli_query($link,$sql); echo "&lt;pre/&gt;"; //格式化数据 var_dump($res); //查看获取到的数据集，如图1//三种解析方式 var_dump(mysqli_fetch_row($res)); //如图2 var_dump(mysqli_fetch_assoc($res)); //如图3 var_dump(mysqli_fetch_array($res)); //如图4 结语​ mysqli扩展作为mysql扩展的替代品，用法还有很多可延伸的地方，本文只做最基本的使用说明，希望能帮到同为小白的朋友。]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[U盘数据被病毒隐藏]]></title>
    <url>%2F2019%2F10%2F08%2Fu-pan%2F</url>
    <content type="text"><![CDATA[U盘数据被病毒隐藏如何解决 ​ U盘其实很容易中病毒，日常使用时需谨慎一些，最常见的一种病毒，他会将我们的数据强制隐藏，本机可查看，但是到了别的机子上就无法显示，这种病毒很容易中，但同时他又很容易解决，解决方案如下： 1、使用组合件（win+R）打开运行窗口，输入notepad,按回车新建一个记事本。 2、在记事本中输入以下代码： 1234567for /f "delims=?" %%a in ('dir /a /b') do attrib -a -s -h -r "%%a" @echo off pause&gt;nul exit 3、点击 “文件 —&gt; 另存为” 。 4、将其保存类型改为所有类型，并以“ 病毒隐藏文件夹.cmd”命名。 5、将文件拖入U盘中，双击执行即可恢复文件]]></content>
      <tags>
        <tag>病毒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSDELIVR+GitHub实现图片床]]></title>
    <url>%2F2019%2F09%2F30%2Fjsdelivr%2F</url>
    <content type="text"><![CDATA[JSDELIVR+GitHub实现图片床​ 我们在使用博客时经常要将一些图片转换成网络连接来使用，我们第一个想到的就是将图片挂载到GitHub上去，这样做固然可以解决问题，但是GitHub的访问速度，再加上有时我们的网络环境的不好，可能访问图片会很慢，这个时候我们就可以使用jsdelivr提供的CDN来与GitHub关联，就可让图片快速访问。 准备工作： 安装Git环境 注册GitHub 一、Git向GitHub上传资源1.在本地新建一个文件夹，并用git bash here打开 2.将此文件进行初始化 1git init 3.获取GitHub仓库地址，也可以新建一个仓库 4.回到Git的命令行，输入以下命令。（// 后为注释） 12345git remote add origin 加上我们仓库的地址 //添加远程仓库git pull origin master //将仓库pull到文件夹中git add . //将此文件中的所有文件上传git commit -m "文件描述" //对文件添加描述git push origin master //上传到远程仓库 5.如没有报错，则成功，可去GitHub查看是否上传 6.如报以下错误： 在Git中输入以下代码则可解决： 12git pull --rebase origin mastergit sush -u origin master 二、访问GitHub资源1.在我们要使用的仓库中创建一个release 2.记住我们的版本号，后面要用 3.访问到我们要使用的资源，复制链接。 4.使用jsedelivr访问资源。 5.对比链接 12345678我们的链接： https://github.com/songchangliang/head-img/blob/master/css.jpgjsdelivr链接规则： https://cdn.jsdelivr.net/gh/用户/库@版本号/资源路径对比修改后的链接（可直接访问）： https://cdn.jsdelivr.net/gh/songchangliang/head-img@v0.1/css.jpg 三、结语​ 之后的就是去修改我们的链接了，没什么可讲的，此文如有缺漏，欢迎评论指出。]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SASS基础使用]]></title>
    <url>%2F2019%2F09%2F17%2Fsass%2F</url>
    <content type="text"><![CDATA[SASS基础使用手册​ SASS是一个将脚本解析成CSS的脚本语言，即SassScript,对CSS3（层叠样式表）的语法的一种扩充,提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。 准备工作： 安装Ruby语言—&gt;点击跳转 1.安装​ 这里我们默认大家已经安装过Ruby，并且配置了环境变量，安装SASS只需要在Ruby根目录打开命令行，执行以下代码即可： 1gem install sass 2.使用​ 创建后缀名为.scss的文件，在其中写sass代码，但是浏览器并不认识它，我们需要将它转换为浏览器认识的格式，如css： 1sass test.scss test.css ​ SASS也帮我们内置了四种文件模式，以供我们选择使用： 1234nested：嵌套缩进的css代码，它是默认值。expanded：没有缩进的、扩展的css代码。compact：简洁格式的css代码。compressed：压缩css代码。 ​ 假如我们想要压缩css文件，这时就不必去用什么三方插件，可选择SASS为我们内置的文件模式： 1sass --style compressed test.sass test.css ​ SASS也为我们提供了热加载： 1sass --watch input.scss:output.css 3.基础用法3.1 变量​ SASS中允许我们声明变量，用 $ 开头： 1234$blue : red; div &#123; color : $blue;&#125; 3.2 计算功能​ SASS允许在样式中使用运算操作： 12345div &#123; margin:(1+4)px; padding:(2*5)px; left:(10/5)px;&#125; 3.3 嵌套​ SASS允许选择器进行嵌套： 123456789101112131415161718192021//普通嵌套 #father&#123; width:50px; height:50px; #child&#123; background-color:pink; &#125;; &#125;;//属性同样可嵌套 .class&#123; margin:&#123; left:10px; right:10px; &#125;; &#125;;//在嵌套块中，可使用&amp;来访问父级。如a:hover 则可写为 a&#123; &amp;:hover &#123; color: pink; &#125; &#125;; 3.4 注释​ SASS中注释可有三类： 123456789// 单行注释，只在sass中可见，编译后会被省略/* 多行注释，会保留到编译文件中*/ /*！ 重要注释，此注释不但会保留到编译文件中，连格式也会保留 / 3.5 继承​ SASS中允许出现继承关系，使用关键字 @extend 12345678// class2继承calss1，即class2拥有class1的属性 .class1&#123; width:10px; &#125;; .class2&#123; @extend .class1; height:10px; &#125;; 3.6 Mixin​ Mixin我们就把他理解成一个方法即可，使用关键字 @mixin: 12345678910111213// 我们定义一个居中方案，使用时直接使用即可 @mixin center&#123; position: absolute; left:0px; right:0px; top:0px; bottom:0px; margin:auto; &#125;; .class2&#123; @include center; //使用关键字 @include 引用 &#125;; 3.7 自定义函数​ SASS允许我们定义函数，使用关键字 @function： 1234567@function tuo($n)&#123; @return $n * 2;&#125;;.class4&#123; margin: tuo(5);&#125;; 3.8 if判断​ SASS允许简单的逻辑运算，如if，使用关键字 @if : 123456789101112 .class5&#123; @if 1+1 == 2 &#123; margin:0 auto; &#125; &#125;;//当然它的搭档 @else，也还在： .class6&#123; @if( 3 &gt; 5 )&#123; color:red; &#125;@else&#123; color:pink; &#125;; &#125;; 3.9 循环操作 for循环，使用关键字 @for ： 1234567 @for $i from 1 to 5&#123; .box#&#123;$i&#125;&#123; size:#&#123;$i&#125;px; &#125;; &#125;;//提示：#&#123;&#125;相当于ES6中的$&#123;&#125;,用于做拼接操作 while循环，使用关键字 @while ： 1234567$s:0;@while $s&lt;5&#123; .time#&#123;$s&#125;&#123; margin-left:#&#123;$s&#125;px; &#125;; $s: $s+1;&#125;; 4.结语​ 本文旨在指导快速入门了解SASS，并不能靠本文一招吃透SASS，当然，也没有任何一门技术是可以速成的，都是要靠一定周期的学习、练习去认识去掌握，本文概括不全的地方请去官网查看——-&gt;传送门。 本文参考与阮一峰的《SASS用法指南》]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter环境配置]]></title>
    <url>%2F2019%2F08%2F13%2FflutterPZ%2F</url>
    <content type="text"><![CDATA[Flutter环境配置+避坑​ Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。 准备： 操作系统:windows7 64位 磁盘空间：大于3个G，官方指定400M，但并不实际 需要Git环境：前端必备工具 1. JAVA环境配置​ 首先，既然要写原生应用，而其是基于Android的，那我们就必须先去搭建一个JAVA的环境，先让我们去他的官网下一个： JAVA下载地址：https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html ​ 这里我下的是8，如果你已经安装过，并且版本比较新也无所谓，它是向后兼容的，效果是一样的，根据自己的情况下载； ​ 下载完后将他的环境变量配置一下，这里只给出大致，如果做不出来，可另查看相对教程 ​ 配完环境后，在终端全局中执行java如出现以下效果则为成功。 2. FlutterSDK下载​ 1.接下载就是我们的FlutterSDK了，我会给出下载地址，这个地址官方变动较大，如出现变动，可联系我来修改。 FlutterSDK：https://flutter.dev/docs/development/tools/sdk/releases#windows ​ 2.这里版本不是很关键，推荐直接下稳定版的最新一款； ​ 3.接下来将他解压，尽量避免把他放在权重高的文件夹中； ​ 4.在bin目录中找到flutter.bat文件来打开应用； ​ 5.这里建议将他也配置到全局变量里； ​ 6.另外，Flutter是需要联网的，如果我们有梯子或者能安全上网则不谈，如果没有，也顺便将联网的环境也给配了： 12export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn ​ 7.接下来我们去终端运行flutter doctor看看有什么问题，这里我们在第一次运行时会有很多错误和警告，不过不用担心，我们慢慢来； 3.Android Studio的安装​ Android Studio的安装和配置，在配合国内的上网环境，可以说是整个配置环节中最致命的一部分，相对的，只要我们这一部分完成了，Flutter的环境配置也就基本完工了 ps、这一步很耗费时间，另外这一步需要梯子，如不懂的朋友可以先去了解一下去搭个梯子。 ​ 1.第一步我们先去官网下载，向下拉，出现图中情况点下载； Android Studio:https://developer.android.com/ ​ 2.下载完后安装此软件，就是下一步下一步，不做过多讲解，唯一需要注意的是安装到最后需要从谷歌上下载很多插件，需要安全上网（梯子）； 如实在不会：https://www.cnblogs.com/xiadewang/p/7820377.html ​ 3.安装完毕后打开软件，然后找到Plugin的配置，搜索Flutter插件，由于网络环境的问题，可能会搜索不到任何插件，当然搜到了最好，如果没有，也不用去网上找解决方案，笔者基本完了全网那些教程，八成不靠谱，这里直接给出插件资源，下载直接从本地导入即可； Flutter插件：https://pan.baidu.com/s/1mfG_hLpFItZ3YVf_4v2Ahw 密码：32er ​ 4.安装Android证书: 1flutter doctor --android-licenses ​ 安装证书时会出现很多选项，犹豫就会败北，一律全选y（一大堆英文也看不懂），接下来我们在执行flutter doctor会发现错误明显少了； 4.vscode的环境配置​ 比起Android Studio，我更推荐使用vscode来编写，因为他更轻量，更快; ​ 1.vscode中同样也需要安装插件，打开插件栏，安装Flutter和Dart两个插件 ​ 2.Shift+Ctrl+p调出命令行，输入Flutter，选择new project创建一个新项目 ​ 3.又是因为网络环境的原因，需要去修改一些配置 ​ 一是在我们的项目中找到 android--&gt;build.gradle，注释掉google()与jcenter(),替换为阿里云的镜像，注意两个都要改; 123maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125; maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125; maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos; &#125; ​ ​ 二是在Flutter SDK包下的flutter.gradle文件，以下是我的安装路径，因人而异：他的修改和第一个相同，注掉原来的路径换上阿里云的路径； 1D:Flutter\flutter_v1.7.8+hotfix.4\flutter\packages\flutter_tools\gradle ​ 5.模拟器选择​ 关于模拟器，它是用来调试用的，Android Studio本身是有自带模拟器的，但是很慢，而且有一大堆配置，对新手不是很建议，这里推荐使用三方模拟器，平时不用还可以玩玩游戏 ︿(￣︶￣)︿ ​ 1.夜神模拟器 12终端配置代码nox_adb.exe connect 127.0.0.1:62001 ​ 2.逍遥模拟器 12终端配置代码adb connect 127.0.0.1:21503 如图为配置成功，可执行flutter run来运行项目，首次运行会很慢 ​ 注：vsc一般会匹配不到三方模拟器，需要去模拟器的安装目标打开终端执行以上代码 6.安全上网​ 全文一直有反复提到安全上网这个词，其实就是在国内有一些限制导致我们无法访问外网，而Flutter又是谷歌的东西，他的大部分插件也好，库也好，都是要去谷歌下载的，而谷歌我们知道在国内是访问不了的，这里我们就需要自己去想办法，找工具，可以使VPN，也可以是自己搭一个梯子，这里只要你用的方法可以让你成功访问Google，那就可以，没有死方法，任何东西都是可以变通的，至于怎么用vpn、梯子，这里就不做讲解，有兴趣可以去自行了解，上外网对于一名程序员来讲其实还是挺重要的。 7.快捷键​ 最后在为大家列几个虚拟机调试的快捷键，供大家参考： 1234r 键：点击后热加载p 键：显示网格，布局中很有用o 键：切换Android和iOS的预览模式q 键：退出调试预览模式 结语： ​ Flutter其实并不难配，主要是环境影响导致一系列问题，如果不用Android Studio的话可以只下载不配置，但是Android Studio必须要有。]]></content>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EJS的初步使用]]></title>
    <url>%2F2019%2F08%2F07%2Fejs%2F</url>
    <content type="text"><![CDATA[EJS的初步应用 ​ EJS一个高效的模板引擎，是一个简单的模板语言，没有所谓“优雅”的神秘语法，纯JavaScript语法就可以使用，帮你将JavaScript语法生成HTML页面。简而言之就是普通的JavaScript语法而已 准备工作： ​ 会使用node搭建服务器 ​ 稍微的express基础 1.npm安装：1$ npm install ejs 2.应用场景：​ 笔者接触EJS也不久，只将其作用于node的模板引擎中，这里也就只总结在node中的使用，直接上代码： 1234567891011121314151617/* 此文件为&lt;初识.js&gt;*/let express = require("express");let app = express();app.set("views","./views");//设置模块位置app.set("view engine","ejs");//设置格式，使用ejs语法//get代替了原生得到createServer方法app.get("/",(req,res)=&gt;&#123; // EJS的核心方法render，将数据注入指定文件 res.render("01.ejs",&#123;"person":["万匹丝",20,"男"]&#125;);&#125;);app.listen(3000); //指定端口，默认3000 1234567891011121314151617181920/* 此文件为&lt;01.ejs&gt;*/&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;ul&gt; &lt;% for( var i=0;i&lt;person.length;i++ )&#123; %&gt; &lt;li&gt; &lt;%= person[i] %&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ​ 文件结构： ​ 这里为了更简单的展示EJS用到了一个后端框架Express，有兴趣的朋友可以了解一下，这里给出的是一个较简单的小例子，可能有的地方看的不是很明白，接下来就为大家大致过一遍。 ​ ps、这里命名纯属为了方便，大家在项目里命名一定要遵循规范，键名字意； 3.EJS基础语法：​ 看到这里可能有很多人会说，你不是说基本没有特殊语法吗？ 不是的，基本没有不是说就没有，只是很简单，一说就会： ejs.render(注入文件, 注入信息) : ​ 此方法是EJS的核心语法，用来将数据注入到文件 &lt;% %&gt; : ​ EJS的模板标签，写EJS时必须要将html文件都后缀改为.ejs，而这个模板就是用来接传来的数据的， ​ 也可使用 &lt;? ?&gt; 来代替 &lt;% %&gt; &lt;%= %&gt; : ​ 用来输出数据到模板 &lt;%# %&gt;: ​ 注释标签，不执行、不输出内容 4.收尾：​ 看过上面的基础语法，在看那个例子，是不是就显而易见可以得出结论了？如果没有也不用着急，可去官网查看详细用法： ​ 结果： 结语： ​ 本文以给那些想要了解的朋友阅读，如果你之前使用过，那么本文给不了你什么。 官方文档： ​ EJS:[https://ejs.bootcss.com/] ​ Express]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grunt的常用插件]]></title>
    <url>%2F2019%2F07%2F29%2Fgrunt-CJ%2F</url>
    <content type="text"><![CDATA[Grunt的常用插件罗列 ​ 我们在平时使用grunt时，他官方的插件库时而稳定时而不稳定，导致很多朋友在使用grunt时常无法查看插件，在这里，为方便查看，为大家搜集罗列了大部分常用插件供大家使用： 1. 清理文件或文件夹: grunt-contrib-clean (v0.5.0) 2. 编译coffee文件为JavaScript文件: grunt-contrib-coffee (v0.7.0) 3. 采用compass方式编译sass文件: grunt-contrib-compass (v0.6.0) 4. 压缩文件或文件夹: grunt-contrib-compress (v0.5.2) 5. 文件拼接（可将多个文件合并到一个文件）: grunt-contrib-concat (v0.3.0) 6. 复制文件或文件夹 : grunt-contrib-copy (v0.4.1) 7. 压缩CSS文件: grunt-contrib-cssmin (v0.6.2) 8. CSS文件语法检查: grunt-contrib-csslint (v0.1.2) 9. 压缩HTML文件: grunt-contrib-htmlmin (v0.1.3) 10.PNG、JPEG图片压缩（保证质量压缩）: grunt-contrib-imagemin (v0.3.0) 11. JS语法检查: grunt-contrib-jshint (v0.6.4) 12. 将LESS编译成CSS: grunt-contrib-less (v0.7.0) 13. 把SASS编译成CSS: grunt-contrib-sass (v0.5.0) 14. 把Stylus文件编译成CSS: grunt-contrib-stylus (v0.8.0) 15. 用UglifyJS方式压缩JS文件: grunt-contrib-uglify (v0.2.4) 16. 实时监测文件的增删改状态，状态改变时自动执行预定义任务: grunt-contrib-watch (v0.5.3) 17. 编译YUIDoc文档: grunt-contrib-yuidoc (v0.5.0) 18. 启动一个web服务器连接 grunt-contrib-connect (v0.5.0) 19. 编译Jade模版: grunt-contrib-jade (v0.8.0) 20. 预编译Handlebars模板到JST文件（Handlebars：结合json数据的模版）: grunt-contrib-handlebars (v0.5.11) 21. 通过PhantomJS运行jasmine（PhantomJS：JS单元测试）: grunt-contrib-jasmine (v0.5.2) 22. 预编译Underscore模板到JST文件（Underscore：JS工具库): grunt-contrib-jst (v0.5.1) 23. 运行Nodeunit单元测试（NodeUnit：Node.js单元测试框架): grunt-contrib-nodeunit (v0.2.1) 24. 用PhantomJS对象运行QUnit单元测试: grunt-contrib-qunit (v0.3.0) 25. 用r.js优化RequireJS项目: grunt-contrib-requirejs (v0.4.1) 结语： 希望本篇可有帮到有需求的朋友！ 原文地址：[ https://www.cnblogs.com/laogai/p/4680308.html ]]]></content>
      <tags>
        <tag>grunt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli安装与问题]]></title>
    <url>%2F2019%2F07%2F27%2Fvue-cli%2F</url>
    <content type="text"><![CDATA[Vue-cli的安装与问题的解决 ​ 在我们vue学习到后期后,脚手架vue-cli的使用是必不可少的，那么这次就来分享一哈它是怎么安装的： ​ 1.首先我们要在文件夹中打开cmd命令行，这里为了方便展示，我就建到了桌面： ​ 2.打开cmd并进入我们新建的文件夹： ​ 3.执行如下命令安装脚手架： npm install vue-cli ​ 4.下载过程可能会有点慢，有基础的朋友可以选择用淘宝的cnpm下载，这里不做过多强调，下载成功后，我们的文件夹会多出如下内容： ​ 5.好了，接下来切回命令行我们继续，输入如下指令来初始化我们的项目： vue init webpack vue_new 注：这里的vue_new是我们自定的项目名 ​ 6.安装过程中的提示大部分初学无关紧要，一路回车即可,效果如下： ​ 7.上一步可能会有段时间，可以去喝会茶什么的，结束后我们可以看到他为我们列出了两行命令，按其执行即可，意为进入项目和打开项目 . ​ 8.最后，他会返回给我们的本机地址，将他复制，粘贴至浏览器即可 ​ 9.下图则是我们最终的结果，至此，我们的vue-cli已经安装完成，至于项目该如何写，就要看我们个人开发了 ​ 10…最后还有一点，就是有的朋友可能会出现安装不了，出错的情况，切记不要慌！，把下载失败的项目删掉，然后在我们的命令行执行如下命令，再去安装一次，会出现这种情况可能是因为我们的环境不干净，有缓存之类导致的。 npm cache clean –force 结语： ​ 如果本篇给解决了你的问题，那是最好的，如果没有也别着急，别灰心！ ​ 办法总比困难多！编程路上哪有一路顺风，加油！]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git向github存放、读取基础操作]]></title>
    <url>%2F2019%2F07%2F17%2Fgit%2F</url>
    <content type="text"><![CDATA[git向github存放与读取文件 ​ 这篇文章主要是介绍Git如何向github上存放文件与从github上向下拉取文件，笔者也正处在学习阶段，所有这篇文章只是介绍最基础的操作，更细腻的还在探究中 准备工作: ​ 安装Git ​ 注册github 1.向github存放：​ 第一步我们需要在github上创建一个仓库 ​ 接下来我们新建一个文件夹，用git或cmd进入文件夹 ​ 下面我们使用git init 文件名命令来初始环境 ​ 他会生成一个new-test文件，使用cd命令进入他 ​ 接下来在new-test中新建一个js做演示，随便写入内容即可 ​ 切换回命令行，先使用git status命令查看仓库状态，如果为未保存，则使用git add .将其添加到缓存区 ​ 紧接着再使用git commit -m &quot;提示&quot;命令给他添加提示并提交版本 ​ 再次使用git status查看状态 ​ 确认无误后，使用git remote add 远程仓库名 远程地址命令来添加远程仓库，仓库名随意起，仓库地址为我们开始在github上创建的仓库地址 ​ 添加完仓库后，我们可使用git remote命令来查看所有仓库或使用git remote -v来查看仓库详情 ​ 最后，使用git push -u 远程仓库名 分支名命令上传代码 ​ 接下来去github上查看是否上传成功 2.从github上读取：​ 看了怎么向远程存放，接下来我们看看怎么从远程读取到项目，为了模拟环境，我们删掉本地文件，再使用git clone 地址命令 来获取文件 ​ 一个空文件夹： ​ 远程仓库的地址： ​ 向下拉取项目： ​ 我又回来了： ​ 与存放相同，先进入文件，但是我们一般不会轻易对主分支直接进行修改，而是使用git branch 分支名 来创建一个分支,在此分支下进行修改 ​ 创建好分支后，使用git checkout 分支名命令来切换到刚创建的分支 ​ 接下来我们去修改一下文件， 然后与上传时一样，对他进行git add .、git commit -m &quot;&quot;的操作 ​ 保险起见，使用git status命令确认无误后再次使用git push命令向仓库提交提交，但是要注意的是，这里的文件是我们从远程拉取下来的，所以仓库发生了变化，我们先使用git remote命令来查看仓库 ​ 使用此仓库： ​ 最后查看github文件是否变化，如有变化则为成功，注意：这里我们有切换分支来查看 3.合并上传文件​ 这一步不是必须的，可根据实际要求来定，向远程再次上传完之后，我们的主分支文件是不会发生变化的，如想让它更新，首先我们需要切换到我们上传的分支去： ​ 然后点击New pull request ​ 需要备注可填写，不需要则可直接点击Create pull request ​ 点完之后，一般我们就不用管了，交给主分支负责人去同意，这边就会更新，但是如果是我们自己练习的话，则需要我们自己同意一下即可，这里就不配图了，下图为更新结果 结语： ​ 本篇如果对大家有所帮助那是最好的，如果没有，那权当没看到，或者联系我来改正、咨询， ​ 但是不爱别伤害！！勿喷！]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http状态码清单]]></title>
    <url>%2F2019%2F07%2F15%2Fhttp%2F</url>
    <content type="text"><![CDATA[http状态码清单​ http状态码其实就是网络协议传输的一个状态，为了方便大家查看查阅，这里笔者为大家收集采集了全部的状态，供大家使用 批注： ​ 成功区间：大于200 小于300 特例304 100 客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。 101 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。 102 由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。 200 请求已成功，请求所希望的响应头或数据体将随此响应返回。 201 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。 202 服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。 203 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。 204 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。 205 服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。 206 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。 207 由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。 300 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。 301 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。 302 请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。 303 对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。 304 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 该响应必须包含以下的头信息： Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。 305 被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。 306 在最新版的规范中，306状态码已经不再被使用。 307 请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 400 1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 2、请求参数有误。 401 当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。 402 该状态码是为了将来可能的需求而预留的。 403 服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。 404 请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。 405 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。 406 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。 407 与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。 408 请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。 409 由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。 410 被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。 411 服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。 412 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。 413 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。 414 请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。 415 对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。 416 如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。 417 在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。 421 从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。 422 从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。 423 请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV） 424 由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV） 425 在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。 426 客户端应当切换到TLS/1.0。（RFC 2817） 449 由微软扩展，代表请求应当在执行完适当的操作后进行重试。 500 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。 501 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。 502 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。 503 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。 504 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 注意：某些代理服务器在DNS查询超时时会返回400或者500错误 505 服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。 506 由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。 507 服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918) 509 服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。 510 获取资源所需要的策略并没有没满足。（RFC 2774） 信息来自菜鸟教程，介绍不周到的地方，请跳转至菜鸟查看菜鸟教程https://www.runoob.com/http/http-status-codes.html]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ps发丝（小白向）]]></title>
    <url>%2F2019%2F07%2F14%2Fpsfasi%2F</url>
    <content type="text"><![CDATA[ps通道扣发丝​ 相信使用过ps的同学都知道有些图片用自带工具其实是很难满足需求的，就好比我们这次要说的，头发丝，相信对很多同学来讲，用自带工具去扣不仅效率低而且很容易出错，这篇文章就来给大家介绍一种相对于其他方法来讲较简单的一种（自认为）： 准备工作： 下载：Photoshop cc/photoshop cs 1.选图​ 这次我们使用人类永远的老婆来做示范，尽管她不是全屏头发丝那种，但是实际操作中谁会去整呢种来搞呢，再加上谁能和老婆比呢！（ ╮(╯▽╰)╭ ）： 2.开搞​ 废话不多说，我们开始，保险起见，建议做图之前不要在原图上直接扣，将图层复制一份，在拷贝图层上做我们要实现都东西 ​ ​ 接下来切换到通道，点击查看红、绿、蓝、哪个通道下图片对比度最为鲜明，此图我们得到蓝通道，将其复制一份通道的选择是根据图片的 ​ ​ 调整他的色阶，加深对比度，色阶可在上侧 图像—调整—色阶，也可直接使用快捷键CtrL+L直接调用 ​ 我们会发现图中有很多不干净的东西，这里我们使用画笔工具将它涂抹掉（是不是干净多了） ​ 接下来我们点击右下角的载入选区按钮 ​ 在图中右键点击选择反向 ​ 切换回图层，拷贝出我们的选区 ​ 这里我们切换回原图中将老婆的大致轮廓扣出来 3.完工​ 最后我们只用显示扣出的两次图层就行了，这里笔者加入了白色的背景图层，大家可根据自己实际需求来添加，到这一步，我们也就成功的将老婆从原图中扣了出来 结语： ​ 怎么样，是不是很简单，相信各位跟着一步步来应该没什么问题，但是如果有小伙伴有更厉害的方法，欢迎随时联系笔者~(@^０^@)/★]]></content>
      <tags>
        <tag>ps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS的四种水平垂直居中方案]]></title>
    <url>%2F2019%2F07%2F12%2FcssCenter%2F</url>
    <content type="text"><![CDATA[网页的水平垂直居中方案​ 常言讲，人类已经成功创造出登陆月球的方法，但仍没能创造出一套完美的垂直水平居中方案，这里为大家列出四种垂直水平居中方案，各有利弊，酌情使用： 1.position定位居中​ 将定位四个方向全定义为0像素，让边距自适应： 12345678#box&#123; position:absolute; top:0px; bottom:0px; left:0px; right:0px; margin:auto;&#125; 2. position+transform定位加2D变化居中​ 将元素的绝对定位absolute的 左 、上 定义为百分之五十，再将元素用2D平移向 左、上 移动负百分之五十即可实现垂直水平居中： 123456#box&#123; position:absolute; left:50%; top:50%; transform: translate(-50%,-50%); &#125; 3.flex居中​ 很多小伙伴不知道的是flex其实也可以做垂直水平居中，用它居中其实很简单，只需要将它的主轴、侧轴的富裕空间设为居中即可： 至于flex本篇就不做详解了，有意向的朋友可去自行查看文档学习 12345#box&#123; display:flex; justify-content: center; align-items: center;&#125; 4.使用宽度定位​ 使用宽度定位，有一定限制，因为他是作用于子集的，将自身宽度设为100%，让其内容center即可： 1234#box&#123; width:100%; text-align:center;&#125; 结语： ​ 四种居中方案各有利弊，酌情使用，如果有更好的方案，欢迎随时向笔者联系！]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免费实现内网穿透]]></title>
    <url>%2F2019%2F07%2F11%2FIntranet-through%2F</url>
    <content type="text"><![CDATA[内网穿透 ​ 内网穿透，也叫NAT穿透，这种东西一般我们用不到，但是相信很多小伙伴在写类似微信公众号之类的应用时，都会用到它，说白了，他就是让外网机能够访问到我们内网的东西，在市面上这类应用有很多，但多少会有一些弊端ps.土豪朋友当我没说 准备工作： cpolar https://www.cpolar.com/ 1.下载cpolar​ 这里我们要用到一款叫cpolar的脚本软件，首先，进入他的官网，根据个人系统下载： ​ 解压下载好的安装包，建议单独新建一个文件解压： ​ 我们在去cpolar官网注册个账号，登录进去后官方是给出使用方法的，也可去官方查看。 cpolar:https://www.cpolar.com/ ​ 好了，我们接下来打开我们下载好的文件，注意：打开时必须使用cmd从控制台打开，否则无效，打开效果 ​ 他会给出要使用的命令： 1cpolar http 端口号 ​ 执行后会返回给我们http和https两种格式的地址： ​ 去浏览器验证（出现Windows主页为成功，穿透的网会很慢，但是效果是一样的） ​ 最后，如果有加载不出来页面的情况，我们这时去官网登录进去，找到cpolar为我们提供的隧道，并将它输入在cmd中，在从执行即可；]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown文件常用语法]]></title>
    <url>%2F2019%2F07%2F09%2Fmd-test%2F</url>
    <content type="text"><![CDATA[markdown文件常用语法​ markdown文件相信很多写过博客的小伙伴都多少了解一二，他是一门可通过标签来让文本拥有一些样式的语言，说是语言，但却十分简单，所以大家不必太担心十几分钟就可让我们上手去编辑它。 markdown格式文件只要将普通文本后缀改为 .md 即可 市面上有很多markdown文件的编辑器，大同小异，看个人喜好 面向初学者，老手勿喷 1 .基础1.1. 标题 语法 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 1.2. 引用 语法 12&gt; 引用内容1&gt; 引用内容2 效果 引用内容1 引用内容2 2 . 代码2.1 单行代码 语法 1` let hello = "world" ` 效果 let hello = &quot;world&quot; 2.2 多行代码 语法 11.两种方法 1~~~ 2.两种方法的使用方法（即在后面加上要写的语言即可） 1~~~js 123456- 效果 ```js var a = new Arr() //这是一段js代码 3 . 列表3.1 无序列表 语法 1234+ 方法一- 方法二* 方法三注：三中的方法效果相同 3.2 多行无序列表 语法 123* 多行无序列表1TAB * 多行无序列表2 TAB TAB * 多行无序列表3 效果 多行无序列表1 多行无序列表2 多行无序列表3 3.3 表格 语法 1|姓名|性别|年龄|联系方式| 效果 姓名 性别 年龄 联系方式 万匹丝 男 18 10086 3.4 图片 超链接 语法 12345//图片，超链接都可以（不止一中语法，此教程只列出一种）//图片建议直接![图片名](图片地址)[ 连接 ]&lt; 连接 &gt; 效果 [www.wps.com] 演示链接（无实际作用） &lt;www.wps.com&gt; 演示链接（无实际作用） 4 . 其他4.1 文本 语法 12345678910111213141.基础效果 * 斜体 * _ 斜体 _ ** 加粗 ** __ 加粗 __ ~~ 删除线 ~~2.分割线 *** --- ___3.注脚 [^1] 效果 基础效果 斜体 加粗 删除线 分割线 注脚 注脚[^1] 4.2 特殊字符 语法 1234567891011121314151617181920&amp;copy; 版权 &amp;reg; 注册商标&amp;trade; 商标&amp;nbsp; 空格&amp;amp; 和号&amp;quot; 引号&amp;apos; 撇号&amp;lt; 小于号&amp;gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;cent; 分&amp;pound; 磅&amp;euro; 欧元&amp;yen; 元&amp;sect; 节&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 正负号 效果不一一演示 &copy; 版权； &reg; 注册商标； &trade; 商标； &amp; 和号； &quot; 引号； &apos; 撇号； &ne; 不等号； &cent; 分； &pound; 磅； &euro; 欧元； &yen; 元； &sect;节； &divide;除号； &plusmn;正负号；]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建一个属于自己的博客]]></title>
    <url>%2F2019%2F07%2F08%2Ftest%2F</url>
    <content type="text"><![CDATA[搭建属于自己的博客 ————基于hexo ​ 相信每一个想走技术流的小伙伴们都想过有一个属于自己的“脸面”博客，他不仅能让我们把平时学习中遇到的问题记录下来，同时在我们去面试时，他也会成为加分项，当然它也是一件很拉风的事。接下来就让我们尝试着自己去搭建一个博客试试！（文章本意帮助那些还不会自己搭建的小伙伴，面向新手，老手勿喷） 准备工作： 安装node.js 安装配置git 注册github账号 1.下载配置hexo​ 首先，在cmd命令行中输入如下命令： 12345$ npm install hexo-cli -g $ hexo init blog //初始化要搭建的博客文件夹 blog可自定义$ cd blog $ npm install $ hexo server ​ 完成后，blog中出现以下结构为成功 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 2.注册github仓库​ 好了，完成上一步到这里，证明我们已经成功一半了，接下来，我们就要为向GitHub部署做准备了，首先我们要有一个GitHub账号，这里就不多作说明了，自行注册，完成后，进入GitHub主页，登录， 点击New repository 这里注意，github仓库命名很严格，这里必须以用户名.github.io来命名，我这里因为已经创建过了，所以会报错，不用担心。 创建完毕后，会给我们一个HTTPS地址，这个就是我们待会要部署的地址： 3.向GitHub部署​ 好啦，到了这一步，那我们距离胜利还差最后一脚，我们有了博客模板，有了github的地址，就差将两个结合起来，在那之前，让我们先安装一个插件，同样想第一步那样，在cmd中输入 1$ npm install hexo-deployer-git --save ​ 下载完后，我们需要对blog文件下的_config.yml文件进行一些配置，打开后向下翻找到deploy项，进行如下配置（这里注意，每个：号之前必须有一个空格隔开，否则会出错）： 1234deploy: type: git repo: https://github.com/用户名/用户名.github.io.git branch: master ​ 到这一步，我们只需要在cmd中输入hexo d命令将我们的博客推向服务器即可，之后，我们就能通过之前注册的仓库访问到我们的博客了用户名.github.io.git 1$ hexo d 4.主题配置​ 搭好博客后，一个美观的主题是必不可少的，这里作为演示，我向大家推荐一款我个人比较喜欢的一款主题yilia，作者：litten，这里只介绍如何安装，具体主题配置请查看作者主页：https://github.com/litten/hexo-theme-yilia ​ 安装 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia ​ 修改blog文件下_config.yml文件的一些配置： 1theme: yilia ​ 保存，配置完成，即可去浏览器查看效果：]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
